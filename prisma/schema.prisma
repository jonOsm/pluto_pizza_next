// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//TODO: Migrate fields to separate profile model when necessary
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    //profile fields?
    firstName     String?
    lastName      String?
    disabled      Boolean   @default(false)
    addresses     Address[]
    carts         Cart[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//Pluto Pizza Models

model Product {
    id        String  @id @default(cuid())
    name      String
    basePrice Float
    isDraft   Boolean
    stock     Int
    sku       String
    image_url String

    productCustomizations ProductCustomization[]
}

model Address {
    id          String  @id @default(cuid())
    label       String?
    street      String
    unit        String?
    province    String
    country     String? @default("Canada")
    postalCode  String
    phoneNumber String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Topping {
    id         String @id @default(cuid())
    name       String
    base_price Float

    topingType   ToppingType? @relation(fields: [topingTypeId], references: [id])
    topingTypeId String?

    productCustomizations ProductCustomization[]
}

model ToppingType {
    id       String    @id @default(cuid())
    name     String
    toppings Topping[]
}

model CrustType {
    id                    String                 @id @default(cuid())
    name                  String
    productCustomizations ProductCustomization[]
}

model CrustThickness {
    id                    String                 @id @default(cuid())
    name                  String
    productCustomizations ProductCustomization[]
}

model CheeseType {
    id                    String                 @id @default(cuid())
    name                  String
    productCustomizations ProductCustomization[]
}

model CheeseAmt {
    id                    String                 @id @default(cuid())
    name                  String
    basePrice             Float
    productCustomizations ProductCustomization[]
}

model SauceType {
    id                    String                 @id @default(cuid())
    name                  String
    productCustomizations ProductCustomization[]
}

model SauceAmt {
    id                    String                 @id @default(cuid())
    name                  String
    productCustomizations ProductCustomization[]
}

model ProductSize {
    id                    String                 @id @default(cuid())
    basePrice             Float
    productCustomizations ProductCustomization[]
}

model ProductCustomization {
    id               String         @id @default(cuid())
    product          Product        @relation(fields: [productId], references: [id])
    productId        String
    toppings         Topping[]
    crustType        CrustType      @relation(fields: [crustTypeId], references: [id])
    crustTypeId      String
    crustThickness   CrustThickness @relation(fields: [crustThicknessId], references: [id])
    crustThicknessId String
    cheeseType       CheeseType     @relation(fields: [cheeseTypeId], references: [id])
    cheeseTypeId     String
    cheeseAmt        CheeseAmt      @relation(fields: [cheeseAmtId], references: [id])
    cheeseAmtId      String
    sauceType        SauceType      @relation(fields: [sauceTypeId], references: [id])
    sauceTypeId      String
    sauceAmt         SauceAmt       @relation(fields: [sauceAmtId], references: [id])
    sauceAmtId       String
    productSize      ProductSize    @relation(fields: [productSizeId], references: [id])
    productSizeId    String

    cartItem CartItem?
}

// model ProductCustomizationTopping {
//     id String @id @default(cuid())
// }

model CartItem {
    id                     String               @id @default(cuid())
    productCustomization   ProductCustomization @relation(fields: [productCustomizationId], references: [id])
    productCustomizationId String               @unique
    cart                   Cart                 @relation(fields: [cartId], references: [id])
    cartId                 String
}

model Cart {
    id     String  @id @default(cuid())
    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    cartItems CartItem[]
}
